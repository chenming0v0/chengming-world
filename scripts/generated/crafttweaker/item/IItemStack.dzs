import crafttweaker.block.IBlock;
import crafttweaker.block.IBlockDefinition;
import crafttweaker.block.IBlockState;
import crafttweaker.data.IData;
import crafttweaker.enchantments.IEnchantment;
import crafttweaker.enchantments.IEnchantmentDefinition;
import crafttweaker.entity.AttributeModifier;
import crafttweaker.entity.IEntity;
import crafttweaker.entity.IEntityEquipmentSlot;
import crafttweaker.entity.IEntityItem;
import crafttweaker.item.IIngredient;
import crafttweaker.item.IItemDefinition;
import crafttweaker.item.IMutableItemStack;
import crafttweaker.item.WeightedItemStack;
import crafttweaker.liquid.ILiquidStack;
import crafttweaker.player.IPlayer;
import crafttweaker.world.IBlockPos;
import crafttweaker.world.IWorld;
import mods.ctintegration.IEnergyStorage;
import mods.randomtweaker.item.IManaBauble;
import mods.randomtweaker.item.IManaItem;

zenClass IItemStack extends IIngredient {
    var emc as long;
    val emcSellValue as long;
    val maxItemUseDuration as int;
    val capNBT as IData;
    val isBlock as bool;
    val energy as IEnergyStorage;
    val name as string;
    val isEmpty as bool;
    val definition as IItemDefinition;
    var displayName as string;
    val tag as IData;
    val metadata as int;
    var hardness as float;
    val itemEnchantability as int;
    val hasContainerItem as bool;
    val hasCustomEntity as bool;
    val containerItem as IItemStack;
    var maxDamage as int;
    val burnTime as int;
    val damage as int;
    val isBeaconPayment as bool;
    val isDamaged as bool;
    var maxStackSize as int;
    val liquid as ILiquidStack;
    val isEnchantable as bool;
    val showsDurabilityBar as bool;
    val isItemBlock as bool;
    val hasTag as bool;
    val isDamageable as bool;
    val canEditBlocks as bool;
    val hasSubtypes as bool;
    val isFood as bool;
    val saturation as float;
    val healAmount as int;
    val matchTagExact as bool;
    var repairCost as int;
    val isEnchanted as bool;
    val isStackable as bool;
    val isOnItemFrame as bool;
    val hasEffect as bool;
    val hasDisplayName as bool;
    
    function asIManaItem() as IManaItem;
    
    function isIManaItem() as bool;
    
    function asIManaBauble() as IManaBauble;
    
    function isIManaBauble() as bool;
    
    function getTagSize() as int;
    
    function getMaxItemUseDuration() as int;
    
    function withCapNBT(capNBT as IData) as IItemStack;
    
    function addAttributeModifier(attributeName as string, modifier as AttributeModifier, equipmentSlot as IEntityEquipmentSlot) as void;
    
    function getCapNBT() as IData;
    
    function isBlock() as bool;
    
    static function fromData(arg0 as IData) as IItemStack;
    
    function isEnergyStorage() as bool;
    
    function asData() as IData;
    
    function weight(p as float) as WeightedItemStack;
    
    function amount(amount as int) as IIngredient;
    
    function amount(amount as int) as IItemStack;
    
    function canApplyAtEnchantingTable(enchantment as IEnchantmentDefinition) as bool;
    
    function mutable() as IMutableItemStack;
    
    function getHarvestLevel(toolClass as string, player as IPlayer, blockState as IBlockState) as int;
    
    function getHarvestLevel(toolClass as string) as int;
    
    function canHarvestBlock(block as IBlockState) as bool;
    
    function addEnchantment(enchantment as IEnchantment) as void;
    
    function getStrengthAgainstBlock(blockState as IBlockState) as float;
    
    function removeTag(tag as string) as IItemStack;
    
    function withTag(tag as IData, matchTagExact as bool = true) as IItemStack;
    
    function anyDamage() as IIngredient;
    
    function withDisplayName(name as string) as IItemStack;
    
    function withLore(lore as string[]) as IItemStack;
    
    function clearCustomName() as void;
    
    function damageItem(amount as int, entity as IEntity) as void;
    
    function splitStack(amount as int) as IItemStack;
    
    function updateTag(tagUpdate as IData, matchTagExact as bool = true) as IItemStack;
    
    function createEntityItem(world as IWorld, pos as IBlockPos) as IEntityItem;
    
    function createEntityItem(world as IWorld, x as float, y as float, z as float) as IEntityItem;
    
    function createEntityItem(world as IWorld, x as int, y as int, z as int) as IEntityItem;
    
    function withAmount(amount as int) as IItemStack;
    
    function canDestroy(block as IBlockDefinition) as bool;
    
    function withDamage(damage as int) as IItemStack;
    
    function asBlock() as IBlock;
    
    function anyAmount() as IItemStack;
    
    function canPlaceOn(block as IBlockDefinition) as bool;
    
    function withEmptyTag() as IItemStack;
    
    operator as() as IManaItem & IManaBauble & WeightedItemStack & IData & IBlock;
    
    operator %(p as float) as WeightedItemStack;
    
    operator *(amount as int) as IItemStack;
}
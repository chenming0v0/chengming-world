import crafttweaker.chat.IChatMessage;
import crafttweaker.data.IData;
import crafttweaker.formatting.IFormattedText;

zenClass string {
    
    function toString() as string;
    
    function hashCode() as int;
    
    function compareTo(anotherString as string) as int;
    
    function indexOf(str as string, fromIndex as int) as int;
    
    function indexOf(str as string) as int;
    
    function indexOf(ch as int, fromIndex as int) as int;
    
    function indexOf(ch as int) as int;
    
    function codePointAt(index as int) as int;
    
    function codePointBefore(index as int) as int;
    
    function codePointCount(beginIndex as int, endIndex as int) as int;
    
    function compareToIgnoreCase(anotherString as string) as int;
    
    function concat(str as string) as string;
    
    function contains(s as string) as bool;
    
    function contentEquals(arg0 as string) as bool;
    
    function endsWith(suffix as string) as bool;
    
    function equalsIgnoreCase(anotherString as string) as bool;
    
    function intern() as string;
    
    function isEmpty() as bool;
    
    function lastIndexOf(ch as int) as int;
    
    function lastIndexOf(str as string) as int;
    
    function lastIndexOf(str as string, fromIndex as int) as int;
    
    function lastIndexOf(ch as int, fromIndex as int) as int;
    
    function length() as int;
    
    function matches(regex as string) as bool;
    
    function offsetByCodePoints(index as int, codePointOffset as int) as int;
    
    function regionMatches(toffset as int, other as string, ooffset as int, len as int) as bool;
    
    function regionMatches(ignoreCase as bool, toffset as int, other as string, ooffset as int, len as int) as bool;
    
    function replace(target as string, replacement as string) as string;
    
    function replaceAll(regex as string, replacement as string) as string;
    
    function replaceFirst(regex as string, replacement as string) as string;
    
    function startsWith(prefix as string, toffset as int) as bool;
    
    function startsWith(prefix as string) as bool;
    
    function subSequence(beginIndex as int, endIndex as int) as string;
    
    function substring(beginIndex as int) as string;
    
    function substring(beginIndex as int, endIndex as int) as string;
    
    function toLowerCase() as string;
    
    function toUpperCase() as string;
    
    function trim() as string;
    
    function indexOf(needle as string, fromIndex as int) as int;
    
    function indexOf(needle as string) as int;
    
    function lastIndexOf(needle as string) as int;
    
    function lastIndexOf(needle as string, fromIndex as int) as int;
    
    function split(separator as string, maximum as int = 0) as any;
    
    operator as() as IFormattedText & IChatMessage & IData;
    
    operator +(formattedText as IFormattedText) as IFormattedText;
    
    operator ~(formattedText as IFormattedText) as IFormattedText;
}